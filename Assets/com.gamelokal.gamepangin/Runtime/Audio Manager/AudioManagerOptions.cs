using System;
using DG.Tweening;
using UnityEngine;

namespace Gamepangin
{
	/// <summary>
	/// A class used to store options for AudioManager play
	/// </summary>
	[Serializable]
	public struct AudioManagerOptions
	{
		/// the track on which to play the sound
		public AudioManagerTracks audioTrack;
		/// the location at which to position the sound
		public Vector3 location;
		/// whether or not the sound should loop
		public bool loop;
		/// the volume at which to play the sound
		public float volume;
		/// whether or not to fade the sound when playing it
		public bool fade;
		/// the initial volume of the sound, before the fade
		public float fadeInitialVolume;
		/// the duration of the fade, in seconds
		public float fadeDuration;
		/// the tween to use when fading the sound
		public Ease fadeEase;
		/// whether or not the sound should persist over scene transitions
		public bool persistent;
		/// an AudioSource to use if you don't want to pick one from the pool
		public AudioSource recycleAudioSource;
		/// The pitch of the audio source.
		public float pitch;
		/// The time (in seconds) at which to play the sound
		public float playbackTime;
		/// Pans a playing sound in a stereo way (left or right). This only applies to sounds that are Mono or Stereo.
		public float panStereo;
		/// Sets how much this AudioSource is affected by 3D spatialisation calculations (attenuation, doppler etc). 0.0 makes the sound full 2D, 1.0 makes it full 3D.
		public float spatialBlend;
		/// whether or not this sound should play in solo mode over its destination track. If yes, all other sounds on that track will be muted when this sound starts playing
		public bool soloSingleTrack;
		/// whether or not this sound should play in solo mode over all other tracks. If yes, all other tracks will be muted when this sound starts playing
		public bool soloAllTracks;
		/// if in any of the solo modes, AutoUnSoloOnEnd will unmute the track(s) automatically once that sound stops playing
		public bool autoUnSoloOnEnd;
		/// Bypass effects (Applied from filter components or global listener filters).
		public bool bypassEffects;
		/// When set global effects on the AudioListener will not be applied to the audio signal generated by the AudioSource. Does not apply if the AudioSource is playing into a mixer group.
		public bool bypassListenerEffects;
		/// When set doesn't route the signal from an AudioSource into the global reverb associated with reverb zones.
		public bool bypassReverbZones;
		/// Sets the priority of the AudioSource.
		public int priority;
		/// The amount by which the signal from the AudioSource will be mixed into the global reverb associated with the Reverb Zones.
		public float reverbZoneMix;
		/// Sets the Doppler scale for this AudioSource.
		public float dopplerLevel;
		/// Sets the spread angle (in degrees) of a 3d stereo or multichannel sound in speaker space.
		public int spread;
		/// Sets/Gets how the AudioSource attenuates over distance.
		public AudioRolloffMode rolloffMode;
		/// Within the Min distance the AudioSource will cease to grow louder in volume.
		public float minDistance;
		/// (Logarithmic rolloff) MaxDistance is the distance a sound stops attenuating at.
		public float maxDistance;
		/// Whether or not the source should be auto recycled if not done playing
		public bool doNotAutoRecycleIfNotDonePlaying;
        
		/// <summary>
		/// A default set of options, meant to suit most common cases.
		/// When using options, it's a good idea to start with that and override only what you need to.
		///
		/// Example :
		/// 
		/// AudioManagerPlayOptions options = AudioManagerPlayOptions.Default;
		/// options.Loop = Loop;
		/// options.Location = Vector3.zero;
		/// options.AudioManagerTrack = AudioManager.MMSoundManagerTracks.Music;
		///     
		/// AudioManagerSoundPlayEvent.Trigger(SoundClip, options);
		///
		/// Here we initialize a new local options set, override its loop, location and track settings, and call a play event using it
		/// 
		/// </summary>
		public static AudioManagerOptions Default
		{
			get
			{
				var defaultOptions = new AudioManagerOptions();
				defaultOptions.audioTrack = AudioManagerTracks.Sfx;
				defaultOptions.location = Vector3.zero;
				defaultOptions.loop = false;
				defaultOptions.volume = 1.0f;
				defaultOptions.fade = false;
				defaultOptions.fadeInitialVolume = 0f;
				defaultOptions.fadeDuration = 1f;
				defaultOptions.fadeEase = Ease.InOutQuart;
				defaultOptions.persistent = false;
				defaultOptions.recycleAudioSource = null;
				defaultOptions.pitch = 1f;
				defaultOptions.panStereo = 0f;
				defaultOptions.spatialBlend = 0.0f;
				defaultOptions.soloSingleTrack = false;
				defaultOptions.soloAllTracks = false;
				defaultOptions.autoUnSoloOnEnd = false;
				defaultOptions.bypassEffects = false;
				defaultOptions.bypassListenerEffects = false;
				defaultOptions.bypassReverbZones = false;
				defaultOptions.priority = 128;
				defaultOptions.reverbZoneMix = 1f;
				defaultOptions.dopplerLevel = 1f;
				defaultOptions.spread = 0;
				defaultOptions.rolloffMode = AudioRolloffMode.Logarithmic;
				defaultOptions.minDistance = 1f;
				defaultOptions.maxDistance = 500f;
				defaultOptions.doNotAutoRecycleIfNotDonePlaying = false;
				return defaultOptions;
			}
		}
	}

}